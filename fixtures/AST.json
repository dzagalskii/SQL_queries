[
{
    "model": "dbserver.ast",
    "pk": 1,
    "fields": {
        "db_index": "CQ-2",
        "db_request": "Выведите названия систем, у которых стоимость месячного содержания не больше, чем у системы в которую они входят",
        "db_answer": "SELECT ast1.Name  FROM ASt as ast1 inner join ASt as ast2 on ast1.UPSys = ast2.Code  WHERE ast1.Cost_pm <= ast2.Cost_pm;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 2,
    "fields": {
        "db_index": "CQ-3",
        "db_request": "Выведите описание риска, который не привязан ни к одной автоматизированной системе",
        "db_answer": "SELECT Discript FROM Vun WHERE Vun.Ast is null;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 3,
    "fields": {
        "db_index": "CQ -1",
        "db_request": "Выведите список стоимостей поддержки всех систем, непосредственно вложенных в систему с названием «AS 2»",
        "db_answer": "SELECT as1.Cost_pm FROM ASt as1 join ASt as2 on as1.UpSys=as2.Code where as2.Name='AS2';"
    }
},
{
    "model": "dbserver.ast",
    "pk": 4,
    "fields": {
        "db_index": "CQ-4",
        "db_request": "Выведите зарплаты начальников департаментов в формате \"ФИО,  Зарплата\"",
        "db_answer": "SELECT DISTINCT emp.Family,  emp.Salary from emp join dep on emp.Family = dep.Chief;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 5,
    "fields": {
        "db_index": "CQ-5",
        "db_request": "Выведите \"Название системы, Описание уязвимости\" для всех систем, в которые не вложена ни одна другая",
        "db_answer": "SELECT DISTINCT ast1.Name, V1.Discript FROM ASt ast1      LEFT JOIN Vun V1 ON V1.ASt = ast1.Code     WHERE NOT EXISTS (SELECT ast2.Code FROM ASt ast2 WHERE ast2.UpSys = ast1.Code) and ast1.Name is not null;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 6,
    "fields": {
        "db_index": "CQ-6",
        "db_request": "Выведите список всех сотрудников в формате \"ФИО, Название департамента\" где они числятся, указав департамент где работает сотрудник только для тех, кто является начальником какого либо департамента",
        "db_answer": "select emp.family, dep.name from emp        left join dep on dep.chief = emp.family;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 7,
    "fields": {
        "db_index": "CQ-7",
        "db_request": "Выведите список всех сотрудников в формате \"ФИО, Название департамента\" указав департамент где работает сотрудник только для тех, кто является начальником именно ЭТОГО департамента",
        "db_answer": "select Emp.Family, ch.Name from Emp left join (select Emp.Family, Dep.Name from Emp join Dep on Dep.code = Emp.Dep where Dep.Chief = Emp.Family) as ch on Emp.Family = ch.Family;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 8,
    "fields": {
        "db_index": "NULL-9",
        "db_request": "Выведите названия систем, у которых стоимость введения в эксплуатацию меньше, чем средняя стоимость введения в эксплуатацию",
        "db_answer": "SELECT ASt.Name  FROM ASt  WHERE ASt.Cost_in < ( SELECT avg(ASt.Cost_in) FROM ASt  WHERE ASt.Cost_in is not null);"
    }
},
{
    "model": "dbserver.ast",
    "pk": 9,
    "fields": {
        "db_index": "NULL-1",
        "db_request": "Выведите названия систем, у которых стоимость введения в эксплуатацию не выше, чем у системы, в которую входит данная",
        "db_answer": "SELECT DISTINCT Name FROM ASt  WHERE Cost_in <=  (SELECT ASt1.Cost_in FROM ASt as ASt1 WHERE ASt1.Code = ASt.UpSys) AND ASt.Name IS NOT NULL;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 10,
    "fields": {
        "db_index": "NULL-8",
        "db_request": "Выведите названия систем, у которых стоимость месячного содержания не больше, чем средняя стоимость содержания",
        "db_answer": "SELECT name  FROM ast  WHERE name is not null and cost_pm is not null and   \tcost_pm <=  (SELECT avg(cost_pm) FROM ASt WHERE cost_pm is not null);"
    }
},
{
    "model": "dbserver.ast",
    "pk": 11,
    "fields": {
        "db_index": "NULL-7",
        "db_request": "Выведите все пары систем (названия и помесячное содержание), у которых стоимости помесячного содержания равны или могут быть равны",
        "db_answer": "SELECT DISTINCT AS1.Name AS ASt_Name1, AS1.Cost_pm AS ASt_Cost_pm1, AS2.Name AS ASt_Name2, AS2.Cost_pm AS ASt_Cost_pm2 FROM ASt AS1, ASt AS2 WHERE (AS1.Cost_pm = AS2.Cost_pm OR AS1.Cost_pm IS NULL OR AS2.Cost_pm IS NULL ) AND AS1.Code < AS2.Code;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 12,
    "fields": {
        "db_index": "NULL-2",
        "db_request": "Выведите все пары систем (название и стоимость эксплуатации), у которых стоимости введения в эксплуатацию равны или могут быть равны. (1,2) и (2,1) считать одинаковыми парами",
        "db_answer": "SELECT DISTINCT a1.name, a2.name, a1.cost_in  FROM Ast a1 JOIN Ast a2 ON ((a1.Cost_in = a2.cost_in OR a1.cost_in IS NULL    \tOR a2.cost_in IS NULL) AND a1.Code > a2.Code) ;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 13,
    "fields": {
        "db_index": "NULL-5",
        "db_request": "Выведите все пары отделов (название отделов и их начальники) у которых не может быть один начальник",
        "db_answer": "SELECT A.Name, A.Chief, B.Name, B.Chief  FROM DEP A CROSS JOIN Dep B WHERE A.Chief IS NOT NULL AND B.Chief IS NOT NULL AND A.Chief<>B.Chief AND A.Code<B.Code;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 14,
    "fields": {
        "db_index": "NULL-3",
        "db_request": "Выведите все пары уязвимостей (коды уязвимостей и названия систем к которым они относятся) точно не относящихся к одной системе",
        "db_answer": "SELECT distinct Vun_1.Code, Vun_1.ASt, Vun_2.Code, Vun_2.ASt FROM Vun Vun_1 JOIN Vun Vun_2 ON (Vun_1.ASt <>  Vun_2.ASt) order by Vun_1.Code;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 15,
    "fields": {
        "db_index": "NULL-6",
        "db_request": "Выведите список стоимостей владения всех систем, в которые не вложена ни одна другая",
        "db_answer": "SELECT distinct  Ast1.Cost_pm FROM ASt Ast1         WHERE NOT EXISTS (SELECT Ast2.Code FROM ASt Ast2 WHERE Ast2.UpSys = Ast1.Code);"
    }
},
{
    "model": "dbserver.ast",
    "pk": 16,
    "fields": {
        "db_index": "NULL-10",
        "db_request": "Выведите список существующих стоимостей владения всех систем, в которые вложена хотя бы одна другая",
        "db_answer": "SELECT distinct ASt.Cost_pm   FROM ASt   WHERE ASt.Code IN (SELECT ASt.UPSys FROM ASt WHERE ASt.UPSys IS NOT NULL)   and ASt.Cost_pm is not null;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 17,
    "fields": {
        "db_index": "AGR-2",
        "db_request": "Выведите код уязвимости и описание риска с численной оценкой не ниже средней по текущим данным",
        "db_answer": "SELECT DISTINCT v1.code, v1.discript  FROM VUN v1  WHERE v1.Cost < (SELECT AVG(v2.Cost) FROM VUN v2 WHERE v2.Cost IS NOT NULL);"
    }
},
{
    "model": "dbserver.ast",
    "pk": 18,
    "fields": {
        "db_index": "AGR-4",
        "db_request": "Выведите название всех системы с минимальной стоимостью владения в их отделах",
        "db_answer": "SELECT ASt1.Name  FROM ASt ASt1  WHERE ASt1.Cost_in = (SELECT min(ASt.Cost_in) FROM ASt WHERE ASt.Dep = ASt1.Dep);"
    }
},
{
    "model": "dbserver.ast",
    "pk": 19,
    "fields": {
        "db_index": "AGR-6",
        "db_request": "Выведите название системы с максимальной стоимостью в ее отделе, а также - систему с максимальной стоимостью среди тех, для которых отдел не указан",
        "db_answer": "SELECT A.Name  FROM ASt A WHERE A.Dep IS NOT NULL AND A.Cost_in IN   \t(SELECT MIN(B.Cost_in) FROM ASt B WHERE B.Cost_in IS NOT NULL AND A.Dep=B.Dep);"
    }
},
{
    "model": "dbserver.ast",
    "pk": 20,
    "fields": {
        "db_index": "AGR-3",
        "db_request": "Выведите фамилии сотрудников, получающих не больше среднего значения оклада",
        "db_answer": "SELECT Emp.Family FROM Emp WHERE Emp.Salary <= (SELECT avg(Emp.Salary) FROM Emp);"
    }
},
{
    "model": "dbserver.ast",
    "pk": 21,
    "fields": {
        "db_index": "SUBS-1",
        "db_request": "Выведите название отдела за которым не закреплено автоматизированных систем",
        "db_answer": "SELECT DISTINCT d1.Name  FROM DEP d1  WHERE NOT EXISTS(SELECT a1.Dep FROM AST a1 WHERE a1.Dep = d1.code);"
    }
},
{
    "model": "dbserver.ast",
    "pk": 22,
    "fields": {
        "db_index": "SUBS-2",
        "db_request": "Выведите названия автоматизированных систем, у которых нет вложенных в них других автоматизированных систем",
        "db_answer": "SELECT Name FROM ASt AS A WHERE NOT EXISTS (SELECT * FROM ASt WHERE UPSys=A.Code) and A.Name is not null;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 23,
    "fields": {
        "db_index": "SUBS-4",
        "db_request": "Выведите названия систем, которые непосредственно входят в системы в том же отделе, что и их собственный",
        "db_answer": "SELECT ASt1.Name  FROM ASt as ASt1 join ASt as ASt2 on        (ASt1.UpSys = ASt2.Code and ASt1.DEP is not null         and ASt2.DEP is not null and ASt1.DEP = ASt2.DEP);"
    }
},
{
    "model": "dbserver.ast",
    "pk": 24,
    "fields": {
        "db_index": "SUBS-3",
        "db_request": "Выведите названия систем, которые непосредственно входят в системы других отделов (отличных от их собственного отдела)",
        "db_answer": "SELECT distinct  A1.Name  FROM ASt AS A1 JOIN ASt AS A2 ON (A2.Code=A1.UPSys)  WHERE A1.Dep <> A2.Dep;"
    }
},
{
    "model": "dbserver.ast",
    "pk": 25,
    "fields": {
        "db_index": "SUBS-6",
        "db_request": "Выведите список названий отделов в которых работает хотя бы один сотрудник но не закреплено ни одной АС",
        "db_answer": "SELECT Name_ FROM Dep  WHERE (    0 < (SELECT count(*)         FROM Emp          WHERE Emp.Dep = Dep.Code)     AND     0 = (SELECT count(*)         FROM ASt   WHERE ASt.Dep = Dep.Code)  );"
    }
},
{
    "model": "dbserver.ast",
    "pk": 26,
    "fields": {
        "db_index": "DEL-1",
        "db_request": "Выведите названия систем, с которыми работают все без исключения сотрудники, задействованные в работе с АС",
        "db_answer": "SELECT ASt.Name FROM ASt  WHERE NOT EXISTS  \t((SELECT Emp_Sys.Emp FROM Emp_Sys)  \t  EXCEPT  \t (SELECT Emp_Sys.Emp FROM Emp_Sys WHERE Emp_Sys.ASt = ASt.Code));"
    }
},
{
    "model": "dbserver.ast",
    "pk": 27,
    "fields": {
        "db_index": "DEL-2",
        "db_request": "Выведите фамилии сотрудников, каждый из которых работает с каждой автоматизированной системой (из тех автоматизированных систем, с которыми вообще работают сотрудники)",
        "db_answer": "SELECT Family FROM Emp WHERE NOT EXISTS  \t(SELECT *  \t FROM ASt  \t WHERE NOT EXISTS  \t\t(SELECT *  \t\t FROM Emp_Sys \t\t WHERE Emp_Sys.Emp=Emp.Family AND Emp_Sys.ASt=ASt.Code) \t\tAND EXISTS  \t\t(SELECT *  \t\t FROM Emp_Sys \t\t WHERE Emp_Sys.ASt=ASt.Code));"
    }
}
]
